#!/usr/bin/env php
<?php

require_once __DIR__ . '/vendor/autoload.php';

use App\Test;

$reflector = new \ReflectionClass(Test::class);
$methods = $reflector->getMethods();
$classToMigrateFile = __DIR__ . '/Test.php';
$classToMigrate = \file_get_contents($classToMigrateFile);
$factory = \phpDocumentor\Reflection\DocBlockFactory::createInstance();

foreach ($methods as $method) {
    $matches = [];

    $docBlock = $factory->create($method->getDocComment());
    $params = $docBlock->getTagsByName('param');
    $returnsTypeHint = $docBlock->getTagsByName('return');
    $pattern = '/' . $method->getName() . '\(.+\)' . '/';
    \preg_match($pattern, $classToMigrate, $matches);
    $methodSignature = $matches[0];
    $oldMethodSignature = $methodSignature;
     foreach ($params as $param) {

        $type = (string) $param->getType();
        $types = \explode('|', $type);
        $paramName = '$' . $param->getVariableName();
        $typesNum = count($types);

        // TODO: handle "mixed" type

        if ($typesNum > 2) {
            continue;
        } elseif ($typesNum === 2 && in_array('null', $types)) {
            $type = '?' . ($types[0] === 'null' ? $types[1] : $types[0]);
        }

        $methodSignature = str_replace($paramName, $type . ' ' . $paramName, $methodSignature);
    }
    foreach ($returnsTypeHint as $returnTypeHint) {

        $type = (string) $returnTypeHint->getType();
        $types = \explode('|', $type);

        $typesNum = count($types);

        if ($typesNum === 2 && in_array('null', $types) && !in_array('void', $types)) {
           $type = '?' . ($types[0] === 'null' ? $types[1] : $types[0]);
        } elseif (in_array('void', $types)) {
           $type = 'void' ;
       }
        $methodSignature = $methodSignature.' :'.$type;
    }
    $classToMigrate = str_replace($oldMethodSignature, $methodSignature, $classToMigrate);
    var_dump($classToMigrate);

}

//\file_put_contents($classToMigrateFile, $classToMigrate);
